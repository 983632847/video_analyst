test:
  track:
    exp_name: &TEST_NAME "siamfcpp_alexnet-trn-bch64"
    exp_save: &TEST_SAVE "logs"
    model:
      backbone:
        name: "AlexNet"
        AlexNet:
          pretrain_model_path: ""
      losses:
        names: []
      task_head:
        name: "DenseboxHead"
        DenseboxHead:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
          head_conv_bn: [False, False, True]
      task_model:
        name: "SiamTrack"
        SiamTrack:
          # pretrain_model_path: "models/siamfcpp/siamfcpp-alexnet-vot-md5_18fd31a2f94b0296c08fff9b0f9ad240.pkl"
          pretrain_model_path: "snapshots/siamfcpp_alexnet-trn-bch64/epoch-14.pkl"
    pipeline:
      name: "SiamFCppTracker"
      SiamFCppTracker:
        test_lr: 0.52
        window_influence: 0.21
        penalty_k: 0.04
        num_conv3x3: 3
    tester:
      # names: ["VOTTester",]
      names: ["GOT10kTester",]
      # names: ["LaSOTTester",]
      VOTTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        device_num: 1
        dataset_names: ["VOT2018"]
      GOT10kTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        subsets: ["val"]  # (val|test)
        # subsets: ["test"]  # (val|test)
      LaSOTTester:
        exp_name: *TEST_NAME
        exp_save: *TEST_SAVE
        subsets: ["test"]  # (val|test)
train:
  track:
    exp_name: &TRAIN_NAME "siamfcpp_alexnet-trn"
    exp_save: &TRAIN_SAVE "logs"
    model:
      backbone:
        name: "AlexNet"
        AlexNet:
          pretrain_model_path: "models/alexnet/alexnet-nopad-bn.pkl"
      losses:
        names: ["SigmoidCrossEntropyRetina",
                "SigmoidCrossEntropyCenterness",
                "IOULoss",]
        SigmoidCrossEntropyRetina:
          name: "cls"
          weight: 1.0
          alpha: 0.25
          gamma: 2.0
        SigmoidCrossEntropyCenterness:
          name: "ctr"
          weight: 1.0
        IOULoss:
          name: "reg"
          weight: 3.0
      task_head:
        name: "DenseboxHead"
        DenseboxHead:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
          head_conv_bn: [False, False, True]
      task_model:
        name: "SiamTrack"
        SiamTrack:
          pretrain_model_path: ""
    data:
      num_epochs: 20
      minibatch: 32 # 64
      num_workers: 32
      nr_image_per_epoch: 800000
      datapipeline:
        name: "RegularDatapipeline"
      sampler:
        name: "TrackPairSampler"
        TrackPairSampler:
          negative_pair_ratio: 0.1
        submodules:
          dataset:
            names: ["GOT10kDataset",]
            GOT10kDataset:
              ratio: 1
              max_diff: 100
              dataset_root: "datasets/GOT-10k"
              subset: "train"
          filter:
            name: "TrackPairFilter"
            TrackPairFilter:
              max_area_rate: 0.6
              min_area_rate: 0.001
              max_ratio: 10
      transformer:
        names: ["RandomCropTransformer", ]
        RandomCropTransformer:
          max_scale: 0.3
          max_shift: 0.4
          x_size: 303
      target:
        name: "DenseboxTarget"
        DenseboxTarget:
          total_stride: 8
          score_size: 17
          x_size: 303
          num_conv3x3: 3
    trainer:
      name: "RegularTrainer"
      RegularTrainer:
        exp_name: *TRAIN_NAME
#        devices: ["cuda"]
        # devices: ["cuda:0", "cuda:1"]
        devices: ["cuda:0", "cuda:1", "cuda:2", "cuda:3"]
        max_epoch: 20
        num_iterations: 12500
        snapshot: ""
    optim:
      optimizer:
        name: "SGD"
        SGD:
          lr: 0.01
          momentum: 0.9
          weight_decay: 0.00005
          lr_policy:
          - >
            {
            "name": "LinearLR",
            "start_lr": 0.000001,
            "end_lr": 0.04,
            "max_epoch": 1,
            "max_iter": 12500
            }
          - >
            {
            "name": "CosineLR",
            "start_lr": 0.04,
            "end_lr": 0.000001,
            "max_epoch": 19,
            "max_iter": 12500
            }
          lr_multiplier:
          - >
            {
            "name": "backbone",
            "regex": "basemodel",
            "ratio": 0.1
            }
          - >
            {
            "name": "other",
            "regex": "^((?!basemodel).)*$",
            "ratio": 1
            }
      grad_modifier:
        name: "DynamicFreezer"
        DynamicFreezer:
          schedule:
          - >
            {
            "name": "isConv",
            "regex": "basemodel\\.conv.\\.conv.*",
            "epoch": 0,
            "freezed": true
            }
          - >
            {
            "name": "isConv5",
            "regex": "basemodel\\.conv5\\.conv.*",
            "epoch": 5,
            "freezed": false
            }
          - >
            {
            "name": "isConv4",
            "regex": "basemodel\\.conv4\\.conv.*",
            "epoch": 10,
            "freezed": false
            }
          - >
            {
            "name": "isConv3",
            "regex": "basemodel\\.conv3\\.conv.*",
            "epoch": 15,
            "freezed": false
            }
